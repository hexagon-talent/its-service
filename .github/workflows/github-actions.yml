name: Build and Push device-service

on:
  push:
    branches:
      - main
env:
  ORG_NAME: its-hexagon
  PROJECT_NAME: its-service
  SERVICE_NAME: services
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.ORG_NAME }}/${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.ORG_NAME }}/${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}:latest
          platforms: linux/amd64 #, linux/arm64/v8
  
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      # SSH로 EC2 서버에 접속하여 Docker 이미지를 업데이트 및 배포하는 과정
      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}      
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
              docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.PAT_TOKEN }}
              docker pull ghcr.io/${{ env.ORG_NAME }}/${{ env.PROJECT_NAME }}-${{ env.SERVICE_NAME }}:latest
              cd /home/ubuntu/infra 
              sudo docker-compose down
              sudo docker-compose up -d --build
              sudo docker image prune -f
